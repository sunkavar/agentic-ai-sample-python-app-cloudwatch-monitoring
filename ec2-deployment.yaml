AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 instance for Python Agentic AI Application with CloudWatch Agent'

Parameters:
  InstanceType:
    Type: String
    Default: t3.medium
    Description: EC2 instance type
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
  
  GitHubRepoUrl:
    Type: String
    Description: GitHub repository URL for the application
    Default: 'https://github.com/sunkavar/agentic-ai-sample-python-app-cloudwatch-monitoring.git'
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the instance will be launched
  
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID where the instance will be launched
  
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
    Description: Latest Amazon Linux 2023 AMI ID from SSM Parameter

Resources:
  # IAM Role for EC2 instance
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-EC2-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/CloudWatchApplicationSignalsFullAccess
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-BedrockInvokePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: 
                  - !Sub arn:${AWS::Partition}:bedrock:us-west-2::foundation-model/anthropic.claude-3-7-sonnet-20250219-v1:0
                
  # Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-SG'
      GroupDescription: Security group for Agentic AI Application
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
          
  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref SubnetId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          
          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
                    
          # Download and run the setup script
          cd /home/ec2-user
          wget https://raw.githubusercontent.com/sunkavar/agentic-ai-sample-python-app-cloudwatch-monitoring/main/setup-app.sh -O setup-app.sh
          chmod +x setup-app.sh
          ./setup-app.sh "${GitHubRepoUrl}"
          
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AgenticAI-Instance'
        - Key: Application
          Value: AgenticAI

Outputs:
  InstanceId:
    Description: Instance ID of the EC2 instance
    Value: !Ref EC2Instance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
  
  InstancePublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-PublicIP'
  
  InstancePrivateIP:
    Description: Private IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PrivateIp
    Export:
      Name: !Sub '${AWS::StackName}-PrivateIP'
  
  SessionManagerCommand:
    Description: Command to connect via Session Manager
    Value: !Sub 'aws ssm start-session --target ${EC2Instance} --region ${AWS::Region}'
