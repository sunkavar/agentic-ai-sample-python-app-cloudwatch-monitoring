---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 instance for Python Agentic AI Application with CloudWatch Agent'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Instance Configuration"
        Parameters:
          - InstanceType
          - LatestAmiId
          - GitHubRepoUrl
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - SubnetId
    ParameterLabels:
      InstanceType:
        default: "EC2 Instance Type"
      LatestAmiId:
        Default: "Latest Amazon Linux 2023 AMI Id"
      GitHubRepoUrl:
        default: "GitHub Repository URL"
      VpcId:
        default: "VPC ID"
      SubnetId:
        default: "Subnet ID"

Parameters:
  InstanceType:
    Type: String
    Default: t3.medium
    Description: EC2 instance type for the application
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
    Description: Latest Amazon Linux 2023 AMI ID from SSM Parameter

  GitHubRepoUrl:
    Type: String
    Description: GitHub repository URL for the application
    Default: 'https://github.com/sunkavar/agentic-ai-sample-python-app-cloudwatch-monitoring.git'
    AllowedPattern: '^https://github\.com/[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+\.git$'
    ConstraintDescription: Must be a valid GitHub repository URL
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the instance will be launched
  
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID where the instance will be launched (should be private subnet)
  
  
Resources:
  # Custom IAM Policy for Bedrock Access
  BedrockAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'Managed policy for Bedrock model invocation'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource: 
              - !Sub 'arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:inference-profile/us.anthropic.claude-3-7-sonnet-20250219-v1:0'
              - !Sub 'arn:${AWS::Partition}:bedrock:*::foundation-model/anthropic.claude-3-7-sonnet-20250219-v1:0'

  # IAM Role for EC2 instance
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Description: 'IAM role for Agentic AI EC2 instance'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchApplicationSignalsFullAccess'
        - !Ref BedrockAccessPolicy
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2Role'
                
  # Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for Agentic AI Application - Restricted Access'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'HTTPS access for Session Manager'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroup'
        - Key: Application
          Value: AgenticAI
          
  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref SubnetId
      EbsOptimized: true
      Monitoring: true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: 50
            Encrypted: true
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          
          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
                    
          # Download and run the setup script
          cd /home/ec2-user
          wget https://raw.githubusercontent.com/sunkavar/agentic-ai-sample-python-app-cloudwatch-monitoring/main/setup-app.sh -O setup-app.sh
          chmod +x setup-app.sh
          ./setup-app.sh "${GitHubRepoUrl}"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AgenticAI-Instance'

Outputs:
  InstanceId:
    Description: 'Instance ID of the EC2 instance'
    Value: !Ref EC2Instance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
  
  InstancePrivateIP:
    Description: 'Private IP address of the EC2 instance'
    Value: !GetAtt EC2Instance.PrivateIp
    Export:
      Name: !Sub '${AWS::StackName}-PrivateIP'
  
  SecurityGroupId:
    Description: 'Security Group ID for the instance'
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'
  
  IAMRoleArn:
    Description: 'ARN of the IAM role attached to the instance'
    Value: !GetAtt EC2Role.Arn
    Export:
      Name: !Sub '${AWS::StackName}-IAMRoleArn'
  
  SessionManagerCommand:
    Description: 'Command to connect via Session Manager'
    Value: !Sub 'aws ssm start-session --target ${EC2Instance} --region ${AWS::Region}'
